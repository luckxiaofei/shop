{"remainingRequest":"/Users/luck/shop/admin_web/node_modules/babel-loader/lib/index.js!/Users/luck/shop/admin_web/node_modules/eslint-loader/index.js??ref--13-0!/Users/luck/shop/admin_web/src/utils/request.js","dependencies":[{"path":"/Users/luck/shop/admin_web/src/utils/request.js","mtime":1585976621961},{"path":"/Users/luck/shop/admin_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luck/shop/admin_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/luck/shop/admin_web/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/luck/shop/admin_web/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // api 的 base_url\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  if (_store.default.getters.token) {\n    // 让每个请求携带token-- ['X-Litemall-Admin-Token']为自定义key 请根据实际情况自行修改\n    config.headers['X-Litemall-Admin-Token'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.errno === 501) {\n    _elementUi.MessageBox.alert('系统未登录，请重新登录', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    }).then(function () {\n      _store.default.dispatch('FedLogOut').then(function () {\n        location.reload();\n      });\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 502) {\n    _elementUi.MessageBox.alert('系统内部错误，请联系管理员维护', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 503) {\n    _elementUi.MessageBox.alert('请求业务目前未支持', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 504) {\n    _elementUi.MessageBox.alert('更新数据已经失效，请刷新页面重新操作', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 505) {\n    _elementUi.MessageBox.alert('更新失败，请再尝试一次', '警告', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno === 506) {\n    _elementUi.MessageBox.alert('没有操作权限，请联系管理员授权', '错误', {\n      confirmButtonText: '确定',\n      type: 'error'\n    });\n\n    return Promise.reject('error');\n  } else if (res.errno !== 0) {\n    // 非5xx的错误属于业务错误，留给具体页面处理\n    return Promise.reject(response);\n  } else {\n    return response;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: '登录连接超时（后台不能连接，请联系系统管理员）',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}