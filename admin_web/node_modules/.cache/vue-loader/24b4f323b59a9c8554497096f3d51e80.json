{"remainingRequest":"/Users/luck/shop/admin_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/luck/shop/admin_web/src/views/sys/notice.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/luck/shop/admin_web/src/views/sys/notice.vue","mtime":1585976621989},{"path":"/Users/luck/shop/admin_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luck/shop/admin_web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/luck/shop/admin_web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luck/shop/admin_web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { listNotice, createNotice, updateNotice, deleteNotice, batchDeleteNotice } from '@/api/notice'\nimport BackToTop from '@/components/BackToTop'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport _ from 'lodash'\nimport Editor from '@tinymce/tinymce-vue'\nimport { createStorage } from '@/api/storage'\nimport { getToken } from '@/utils/auth'\n\nexport default {\n  name: 'Notice',\n  components: { BackToTop, Pagination, Editor },\n  data() {\n    return {\n      list: [],\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        title: undefined,\n        content: undefined,\n        sort: 'add_time',\n        order: 'desc'\n      },\n      multipleSelection: [],\n      contentDetail: '',\n      contentDialogVisible: false,\n      dataForm: {\n        id: undefined,\n        title: undefined,\n        content: undefined\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑',\n        create: '创建'\n      },\n      rules: {\n        name: [\n          { required: true, message: '通知标题不能为空', trigger: 'blur' }\n        ]\n      },\n      editorInit: {\n        language: 'zh_CN',\n        height: 200,\n        convert_urls: false,\n        plugins: ['advlist anchor autolink autosave code codesample colorpicker colorpicker contextmenu directionality emoticons fullscreen hr image imagetools importcss insertdatetime link lists media nonbreaking noneditable pagebreak paste preview print save searchreplace spellchecker tabfocus table template textcolor textpattern visualblocks visualchars wordcount'],\n        toolbar: ['searchreplace bold italic underline strikethrough alignleft aligncenter alignright outdent indent  blockquote undo redo removeformat subscript superscript code codesample', 'hr bullist numlist link image charmap preview anchor pagebreak insertdatetime media table emoticons forecolor backcolor fullscreen'],\n        images_upload_handler: function(blobInfo, success, failure) {\n          const formData = new FormData()\n          formData.append('file', blobInfo.blob())\n          createStorage(formData).then(res => {\n            success(res.data.data.url)\n          }).catch(() => {\n            failure('上传失败，请重新上传')\n          })\n        }\n      },\n      downloadLoading: false\n    }\n  },\n  computed: {\n    headers() {\n      return {\n        'X-Litemall-Admin-Token': getToken()\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      listNotice(this.listQuery)\n        .then(response => {\n          this.list = response.data.data.list\n          this.total = response.data.data.total\n          this.listLoading = false\n        })\n        .catch(() => {\n          this.list = []\n          this.total = 0\n          this.listLoading = false\n        })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    resetForm() {\n      this.dataForm = {\n        id: undefined,\n        title: undefined,\n        content: undefined\n      }\n    },\n    handleCreate() {\n      this.resetForm()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate(valid => {\n        if (valid) {\n          createNotice(this.dataForm)\n            .then(response => {\n              this.list.unshift(response.data.data)\n              this.dialogFormVisible = false\n              this.$notify.success({\n                title: '成功',\n                message: '创建成功'\n              })\n            })\n            .catch(response => {\n              this.$notify.error({\n                title: '失败',\n                message: response.data.errmsg\n              })\n            })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.dataForm = Object.assign({}, row)\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate(valid => {\n        if (valid) {\n          updateNotice(this.dataForm)\n            .then(() => {\n              for (const v of this.list) {\n                if (v.id === this.dataForm.id) {\n                  const index = this.list.indexOf(v)\n                  this.list.splice(index, 1, this.dataForm)\n                  break\n                }\n              }\n              this.dialogFormVisible = false\n              this.$notify.success({\n                title: '成功',\n                message: '更新广告成功'\n              })\n            })\n            .catch(response => {\n              this.$notify.error({\n                title: '失败',\n                message: response.data.errmsg\n              })\n            })\n        }\n      })\n    },\n    handleDelete(row) {\n      deleteNotice(row)\n        .then(response => {\n          this.$notify.success({\n            title: '成功',\n            message: '删除通知成功'\n          })\n          const index = this.list.indexOf(row)\n          this.list.splice(index, 1)\n        })\n        .catch(response => {\n          this.$notify.error({\n            title: '失败',\n            message: response.data.errmsg\n          })\n        })\n    },\n    handleSelectionChange(val) {\n      this.multipleSelection = val\n    },\n    showContent(content) {\n      this.contentDetail = content\n      this.contentDialogVisible = true\n    },\n    handleBatchDelete() {\n      if (this.multipleSelection.length === 0) {\n        this.$message.error('请选择至少一条记录')\n        return\n      }\n      const ids = []\n      _.forEach(this.multipleSelection, function(item) {\n        ids.push(item.id)\n      })\n      batchDeleteNotice({ ids: ids })\n        .then(response => {\n          this.$notify.success({\n            title: '成功',\n            message: '批量删除通知成功'\n          })\n          this.getList()\n        })\n        .catch(response => {\n          this.$notify.error({\n            title: '失败',\n            message: response.data.errmsg\n          })\n        })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = [\n          '通知ID',\n          '通知标题',\n          '管理员ID',\n          '添加时间',\n          '更新时间'\n        ]\n        const filterVal = [\n          'id',\n          'title',\n          'content',\n          'adminId',\n          'addTime',\n          'updateTime'\n        ]\n        excel.export_json_to_excel2(tHeader, this.list, filterVal, '通知')\n        this.downloadLoading = false\n      })\n    }\n  }\n}\n",null]}